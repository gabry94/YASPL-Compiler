
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package src.it.gabrielelombari.compilatori.base;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Stack;
import src.it.gabrielelombari.compilatori.visitor.element.VisitableNode;
import src.it.gabrielelombari.compilatori.visitor.semantic.element.SemanticElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\005\000\002\004\006\000\002\004\002" +
    "\000\002\042\005\000\002\042\002\000\002\025\005\000" +
    "\002\041\005\000\002\041\002\000\002\034\003\000\002" +
    "\034\003\000\002\043\005\000\002\043\002\000\002\006" +
    "\006\000\002\007\004\000\002\005\003\000\002\010\006" +
    "\000\002\036\005\000\002\036\002\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\014\005\000\002\015" +
    "\007\000\002\040\005\000\002\040\002\000\002\035\003" +
    "\000\002\016\003\000\002\033\003\000\002\024\007\000" +
    "\002\037\005\000\002\037\002\000\002\020\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\021" +
    "\006\000\002\021\010\000\002\022\007\000\002\017\003" +
    "\000\002\017\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\005\000\002" +
    "\023\004\000\002\023\004\000\002\032\003\000\002\032" +
    "\003\000\002\031\003\000\002\030\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\003\004\010\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\163\001\002\000\004\011\007" +
    "\001\002\000\004\012\010\001\002\000\010\014\011\015" +
    "\ufffc\020\ufffc\001\002\000\004\011\145\001\002\000\006" +
    "\015\015\020\ufff3\001\002\000\004\013\014\001\002\000" +
    "\004\002\000\001\002\000\004\011\140\001\002\000\004" +
    "\012\136\001\002\000\004\020\020\001\002\000\016\011" +
    "\032\020\020\021\036\022\023\023\034\025\027\001\002" +
    "\000\006\012\ufff0\013\ufff0\001\002\000\004\013\ufffe\001" +
    "\002\000\004\004\126\001\002\000\010\012\uffeb\027\uffeb" +
    "\040\uffeb\001\002\000\006\012\121\027\uffed\001\002\000" +
    "\010\012\uffda\027\uffda\040\uffda\001\002\000\024\004\053" +
    "\006\050\011\062\034\063\035\051\036\056\041\054\042" +
    "\046\043\047\001\002\000\032\005\uffca\006\uffca\012\uffca" +
    "\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\037\uffca\040\uffca\001\002\000\010\012\uffd9\027\uffd9" +
    "\040\uffd9\001\002\000\012\012\uffe0\027\uffe0\030\uffc9\040" +
    "\uffe0\001\002\000\010\012\uffea\027\uffea\040\uffea\001\002" +
    "\000\024\004\053\006\050\011\062\034\063\035\051\036" +
    "\056\041\054\042\046\043\047\001\002\000\010\012\uffdb" +
    "\027\uffdb\040\uffdb\001\002\000\004\004\100\001\002\000" +
    "\010\012\uffe8\027\uffe8\040\uffe8\001\002\000\010\012\uffe7" +
    "\027\uffe7\040\uffe7\001\002\000\010\012\uffe9\027\uffe9\040" +
    "\uffe9\001\002\000\004\030\045\001\002\000\010\012\uffe1" +
    "\027\uffe1\040\uffe1\001\002\000\010\012\uffec\027\uffec\040" +
    "\uffec\001\002\000\024\004\053\006\050\011\062\034\063" +
    "\035\051\036\056\041\054\042\046\043\047\001\002\000" +
    "\030\005\uffc6\006\uffc6\012\uffc6\024\uffc6\026\uffc6\027\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\037\uffc6\040\uffc6\001\002\000" +
    "\030\005\uffc7\006\uffc7\012\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\037\uffc7\040\uffc7\001\002\000" +
    "\024\004\053\006\050\011\062\034\063\035\051\036\056" +
    "\041\054\042\046\043\047\001\002\000\030\005\uffc4\006" +
    "\uffc4\012\uffc4\024\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\037\uffc4\040\uffc4\001\002\000\030\005\uffd1\006" +
    "\uffd1\012\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\037\uffd1\040\uffd1\001\002\000\024\004\053\006" +
    "\050\011\062\034\063\035\051\036\056\041\054\042\046" +
    "\043\047\001\002\000\030\005\uffc8\006\uffc8\012\uffc8\024" +
    "\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\037\uffc8" +
    "\040\uffc8\001\002\000\030\005\uffc5\006\uffc5\012\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\037\uffc5" +
    "\040\uffc5\001\002\000\030\005\uffc3\006\uffc3\012\uffc3\024" +
    "\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\037\uffc3" +
    "\040\uffc3\001\002\000\010\012\uffe6\027\uffe6\040\uffe6\001" +
    "\002\000\030\005\uffd0\006\uffd0\012\uffd0\024\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\032\uffd0\033\uffd0\037\uffd0\040\uffd0\001" +
    "\002\000\030\005\uffd5\006\067\012\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\031\066\032\071\033\065\037\uffd5\040\uffd5\001" +
    "\002\000\030\005\uffc9\006\uffc9\012\uffc9\024\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\037\uffc9\040\uffc9\001" +
    "\002\000\024\004\053\006\050\011\062\034\063\035\051" +
    "\036\056\041\054\042\046\043\047\001\002\000\030\005" +
    "\uffce\006\uffce\012\uffce\024\uffce\026\uffce\027\uffce\031\uffce" +
    "\032\uffce\033\uffce\037\uffce\040\uffce\001\002\000\024\004" +
    "\053\006\050\011\062\034\063\035\051\036\056\041\054" +
    "\042\046\043\047\001\002\000\024\004\053\006\050\011" +
    "\062\034\063\035\051\036\056\041\054\042\046\043\047" +
    "\001\002\000\024\004\uffcb\006\uffcb\011\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\041\uffcb\042\uffcb\043\uffcb\001\002\000\024" +
    "\004\053\006\050\011\062\034\063\035\051\036\056\041" +
    "\054\042\046\043\047\001\002\000\024\004\uffcc\006\uffcc" +
    "\011\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\001\002\000\030\005\uffd3\006\067\012\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\031\uffd3\032\071\033\065\037\uffd3\040" +
    "\uffd3\001\002\000\030\005\uffd4\006\uffd4\012\uffd4\024\uffd4" +
    "\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\037\uffd4\040" +
    "\uffd4\001\002\000\030\005\uffd2\006\uffd2\012\uffd2\024\uffd2" +
    "\026\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\037\uffd2\040" +
    "\uffd2\001\002\000\004\005\076\001\002\000\030\005\uffcf" +
    "\006\uffcf\012\uffcf\024\uffcf\026\uffcf\027\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\037\uffcf\040\uffcf\001\002\000\030\005\uffcd" +
    "\006\uffcd\012\uffcd\024\uffcd\026\uffcd\027\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\037\uffcd\040\uffcd\001\002\000\024\004\053" +
    "\006\050\011\062\034\063\035\051\036\056\041\054\042" +
    "\046\043\047\001\002\000\006\005\uffdc\037\uffdc\001\002" +
    "\000\006\005\uffdd\037\104\001\002\000\004\005\107\001" +
    "\002\000\024\004\053\006\050\011\062\034\063\035\051" +
    "\036\056\041\054\042\046\043\047\001\002\000\006\005" +
    "\uffdd\037\104\001\002\000\004\005\uffde\001\002\000\010" +
    "\012\uffdf\027\uffdf\040\uffdf\001\002\000\004\024\111\001" +
    "\002\000\016\011\032\020\020\021\036\022\023\023\034" +
    "\025\027\001\002\000\010\012\uffd8\027\uffd8\040\113\001" +
    "\002\000\016\011\032\020\020\021\036\022\023\023\034" +
    "\025\027\001\002\000\010\012\uffd7\027\uffd7\040\uffd7\001" +
    "\002\000\004\026\116\001\002\000\016\011\032\020\020" +
    "\021\036\022\023\023\034\025\027\001\002\000\004\012" +
    "\120\001\002\000\010\012\uffd6\027\uffd6\040\uffd6\001\002" +
    "\000\016\011\032\020\020\021\036\022\023\023\034\025" +
    "\027\001\002\000\004\027\123\001\002\000\012\012\uffef" +
    "\013\uffef\027\uffef\040\uffef\001\002\000\006\012\121\027" +
    "\uffed\001\002\000\004\027\uffee\001\002\000\004\011\062" +
    "\001\002\000\006\005\uffe3\037\132\001\002\000\006\005" +
    "\uffe2\037\uffe2\001\002\000\004\005\135\001\002\000\004" +
    "\011\062\001\002\000\006\005\uffe3\037\132\001\002\000" +
    "\004\005\uffe4\001\002\000\010\012\uffe5\027\uffe5\040\uffe5" +
    "\001\002\000\006\015\015\020\ufff3\001\002\000\004\020" +
    "\ufff4\001\002\000\004\012\141\001\002\000\006\014\011" +
    "\020\ufffc\001\002\000\004\012\ufff2\001\002\000\004\020" +
    "\020\001\002\000\004\012\ufff1\001\002\000\010\016\ufff7" +
    "\017\ufff7\037\155\001\002\000\004\012\147\001\002\000" +
    "\010\011\145\015\ufffa\020\ufffa\001\002\000\004\012\152" +
    "\001\002\000\006\015\ufffd\020\ufffd\001\002\000\010\011" +
    "\145\015\ufffa\020\ufffa\001\002\000\006\015\ufffb\020\ufffb" +
    "\001\002\000\006\016\160\017\162\001\002\000\004\011" +
    "\156\001\002\000\010\016\ufff7\017\ufff7\037\155\001\002" +
    "\000\006\016\ufff8\017\ufff8\001\002\000\004\012\ufff6\001" +
    "\002\000\004\012\ufff9\001\002\000\004\012\ufff5\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\004\011\001\001\000\004\025\145\001\001\000" +
    "\006\006\015\043\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\021\010\020\001\001\000\034\010\034\011\024\012\043" +
    "\013\023\014\032\015\040\016\036\021\025\022\030\024" +
    "\037\030\027\031\041\033\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\121\001\001\000\002\001\001\000\016\017\114" +
    "\023\060\026\054\027\057\030\027\031\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\107\023\060\026\054\027\057\030" +
    "\027\031\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\056\023\060\026\054\027\057\030\027\031\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\023\076" +
    "\026\054\027\057\030\027\031\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\074\023\060\026\054" +
    "\027\057\030\027\031\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\067\001\001\000\002\001\001\000" +
    "\016\017\063\023\060\026\054\027\057\030\027\031\051" +
    "\001\001\000\002\001\001\000\014\023\073\026\054\027" +
    "\057\030\027\031\051\001\001\000\014\023\072\026\054" +
    "\027\057\030\027\031\051\001\001\000\002\001\001\000" +
    "\014\023\071\026\054\027\057\030\027\031\051\001\001" +
    "\000\002\001\001\000\004\032\067\001\001\000\004\032" +
    "\067\001\001\000\004\032\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\067\001\001\000\020\017" +
    "\100\020\101\023\060\026\054\027\057\030\027\031\051" +
    "\001\001\000\002\001\001\000\004\037\102\001\001\000" +
    "\002\001\001\000\020\017\100\020\104\023\060\026\054" +
    "\027\057\030\027\031\051\001\001\000\004\037\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\034\011\111\012\043\013\023\014\032\015" +
    "\040\016\036\021\025\022\030\024\037\030\027\031\041" +
    "\033\042\001\001\000\002\001\001\000\034\010\034\011" +
    "\113\012\043\013\023\014\032\015\040\016\036\021\025" +
    "\022\030\024\037\030\027\031\041\033\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\034\011\116" +
    "\012\043\013\023\014\032\015\040\016\036\021\025\022" +
    "\030\024\037\030\027\031\041\033\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\010\034\011\123\012" +
    "\043\013\023\014\032\015\040\016\036\021\025\022\030" +
    "\024\037\030\027\031\041\033\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\124\001\001\000\002" +
    "\001\001\000\010\030\027\031\127\035\126\001\001\000" +
    "\004\040\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\027\031\127\035\132\001\001\000\004\040" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\015\043\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\142\007\141\001\001\000\002\001\001" +
    "\000\006\005\143\010\020\001\001\000\002\001\001\000" +
    "\004\041\153\001\001\000\002\001\001\000\006\025\147" +
    "\042\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\147\042\152\001\001\000\002\001\001\000\004" +
    "\034\160\001\001\000\002\001\001\000\004\041\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
/* s.init();*/ 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    parser(Scanner s, String k){ this.s=s; }

    public VisitableNode<SemanticElement> makeNode(String name, VisitableNode<SemanticElement> ... childrens){

             VisitableNode<SemanticElement> toReturn = new VisitableNode<>(new SemanticElement(name));

             for(int i = 0; i < childrens.length; i ++){
                 toReturn.add(childrens[i]);
             }

             return toReturn;
         }

    public VisitableNode<SemanticElement> makeNode(String name, ArrayList<VisitableNode<SemanticElement>> childrens){

            VisitableNode<SemanticElement> toReturn = new VisitableNode<>(new SemanticElement(name));

            for(int i = 0; i < childrens.size(); i ++){
                toReturn.add(childrens.get(i));
            }

            return toReturn;
        }

    public void syntax_error(Symbol s){
        System.out.println(String.format("An error occurred at line %d and column %d", s.left + 1, s.right + 1));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program_n EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> start_val = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program_n ::= PROGRAM IDENTIFIER INSTRUCTION_SEPARATOR block END_PROGRAM 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> blk = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            RESULT = makeNode(NodeConstants.PROG_NODE, makeNode(NodeConstants.ID_NODE, makeNode(id)), blk);

                                            src.it.gabrielelombari.compilatori.visitor.syntactic.Visitor visitor = new src.it.gabrielelombari.compilatori.visitor.syntactic.Visitor();
                                            RESULT.accept(visitor);
                                            visitor.toFile();

                                            src.it.gabrielelombari.compilatori.visitor.semantic.Visitor visitor1 = new src.it.gabrielelombari.compilatori.visitor.semantic.Visitor(new Stack<>());
                                            RESULT.accept(visitor1);
                                            src.it.gabrielelombari.compilatori.visitor.translate.Visitor visitor2 = new src.it.gabrielelombari.compilatori.visitor.translate.Visitor();

                                            System.out.println(RESULT.accept(visitor2));
                                            visitor2.toFile();
                                            System.out.println("Analisi Sintattica completata con successo!");
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_n",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_n ::= error 
            {
              VisitableNode<SemanticElement> RESULT =null;
		System.out.println("No syntax tree generated");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_n",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= variable_declaration_part procedure_declaration_part statement_part 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<SemanticElement>> ptr2 = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr3 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            VisitableNode<SemanticElement> proc_ptr = makeNode(NodeConstants.PROC_DECL_PART_OP, ptr2);
                                            RESULT = makeNode(NodeConstants.BLOCK, ptr1, proc_ptr, ptr3);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variable_declaration_part ::= VAR variable_declaration INSTRUCTION_SEPARATOR variables 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ptrs = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            if(ptrs != null){
                                                ptrs.add(0, ptr1);
                                                RESULT = makeNode(NodeConstants.VAR_DECL_PART, ptrs);
                                            }
                                            else RESULT = makeNode(NodeConstants.VAR_DECL_PART, ptr1);

                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_declaration_part ::= 
            {
              VisitableNode<SemanticElement> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= variable_declaration INSTRUCTION_SEPARATOR variables 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ptrs = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                           RESULT = new ArrayList<VisitableNode<SemanticElement>>();

                                           RESULT.add(ptr1);
                                           if(ptrs != null)
                                            RESULT.addAll(ptrs);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_declaration ::= IDENTIFIER identifiers simple_type 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<SemanticElement>> ids = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            if( ids != null){

                                            VisitableNode<SemanticElement> idNode = makeNode(id);
                                            idNode.data().setCanBeAdded(true);

                                            ids.add(0, makeNode(NodeConstants.ID_NODE, idNode));
                                            ids.add(0, makeNode(type));
                                            RESULT = makeNode(NodeConstants.VAR_DECL_OP ,ids);
                                            } else{
                                            VisitableNode<SemanticElement> idNode = makeNode(id);
                                            idNode.data().setCanBeAdded(true);
                                            RESULT = makeNode(NodeConstants.VAR_DECL_OP ,makeNode(type), makeNode(NodeConstants.ID_NODE, idNode));
                                            }
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifiers ::= SEPARATOR IDENTIFIER identifiers 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ids = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            VisitableNode<SemanticElement> idNode = makeNode(id);
                                            idNode.data().setCanBeAdded(true);
                                            RESULT = new ArrayList<VisitableNode<SemanticElement>>();
                                            RESULT.add(makeNode(NodeConstants.ID_NODE, idNode));

                                            if(ids != null)
                                                RESULT.addAll(ids);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identifiers ::= 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_type ::= INTEGER 
            {
              String RESULT =null;
		RESULT = Constants.INTEGER;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_type ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = Constants.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_declaration_part ::= procedure_declaration INSTRUCTION_SEPARATOR procedure_declaration_part 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ptr2 = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = new ArrayList<VisitableNode<SemanticElement>>();

                                            RESULT.add(ptr1);
                                            if(ptr2 != null)
                                            RESULT.addAll(ptr2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_declaration_part ::= 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedure_declaration ::= PROCEDURE IDENTIFIER INSTRUCTION_SEPARATOR simple_block 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            VisitableNode<SemanticElement> idNode = makeNode(id);
                                            idNode.data().setCanBeAdded(true);

                                            RESULT = makeNode(NodeConstants.PROC_DECL_OP, makeNode(NodeConstants.ID_NODE, idNode), ptr1);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_block ::= variable_declaration_part statement_part 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr2 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(NodeConstants.SIMPLE_BLOCK_OP, ptr1, ptr2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_part ::= compound_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_statement ::= BEGIN statement statements END 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> ptr_st = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<SemanticElement>> ptr_sts = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            if(ptr_sts != null){
                                                ((ArrayList<VisitableNode<SemanticElement>>)ptr_sts).add(0, ptr_st);
                                                RESULT = makeNode(NodeConstants.COMP_ST_OP, ptr_sts);
                                            } else  RESULT = makeNode(NodeConstants.COMP_ST_OP, ptr_st);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= INSTRUCTION_SEPARATOR statement statements 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ptr2 = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = new ArrayList<VisitableNode<SemanticElement>>();

                                            if(ptr2 != null)
                                             RESULT.addAll(ptr2);
                                            RESULT.add(0, ptr1);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements ::= 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= simple_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= structured_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_statement ::= assignment_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_statement ::= read_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_statement ::= procedure_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_statement ::= write_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment_statement ::= variable ASSIGN expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> expr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            VisitableNode<SemanticElement> id_node = makeNode(NodeConstants.ID_NODE, makeNode(value));
                                            RESULT = makeNode(NodeConstants.ASSIGN_OP, id_node, expr);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // read_statement ::= READ LPAR input_variable read_variables RPAR 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ptr_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<SemanticElement>> ptr_sts = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            if(ptr_sts != null){
                                            ((ArrayList<VisitableNode<SemanticElement>>)ptr_sts).add(0, makeNode(NodeConstants.ID_NODE, makeNode(ptr_st)));
                                            RESULT = makeNode(NodeConstants.READ_NODE, ptr_sts);
                                            }else RESULT = makeNode(NodeConstants.READ_NODE, makeNode(NodeConstants.ID_NODE, makeNode(ptr_st)));
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // read_variables ::= SEPARATOR input_variable read_variables 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ptr1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ptr2 = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = new ArrayList<VisitableNode<SemanticElement>>();

                                            if(ptr2 !=  null)
                                                RESULT.addAll(ptr2);

                                            RESULT.add(0, makeNode(NodeConstants.ID_NODE, makeNode(ptr1)));
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // read_variables ::= 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // input_variable ::= variable 
            {
              String RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ptr1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = ptr1;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_variable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_statement ::= procedure_identifier 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            VisitableNode<SemanticElement> id_node = makeNode(NodeConstants.ID_NODE, makeNode(id));
                                            RESULT = makeNode(NodeConstants.CALL_OP, id_node);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_identifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // write_statement ::= WRITE LPAR output_value output_values RPAR 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> ptr_st = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<SemanticElement>> ptr_sts = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        if(ptr_sts != null) {

                                            ptr_sts.add(0, ptr_st);
                                            RESULT = makeNode(NodeConstants.WRITE_NODE, ptr_sts);
                                        }else RESULT = makeNode(NodeConstants.WRITE_NODE, ptr_st);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // output_values ::= SEPARATOR output_value output_values 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<SemanticElement>> ptr2 = (ArrayList<VisitableNode<SemanticElement>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = new ArrayList<VisitableNode<SemanticElement>>();

                                            if(ptr2 != null)
                                             RESULT.addAll(ptr2);
                                            RESULT.add(0, ptr1);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_values",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // output_values ::= 
            {
              ArrayList<VisitableNode<SemanticElement>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_values",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // output_value ::= expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = ptr1;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structured_statement ::= compound_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int cmp_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmp_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> cmp_st = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = cmp_st;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structured_statement ::= if_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int if_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> if_st = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = if_st;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // structured_statement ::= while_statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int while_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int while_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> while_st = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = while_st;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_statement ::= IF expression THEN statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> expr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int st_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> st_1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = makeNode(NodeConstants.IF_OP, expr1, st_1);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_statement ::= IF expression THEN statement ELSE statement 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VisitableNode<SemanticElement> expr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int st_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int st_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> st_1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int st_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> st_2 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = makeNode(NodeConstants.IF_OP_ESLE, expr1, st_1, st_2);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while_statement ::= WHILE expression DO statement INSTRUCTION_SEPARATOR 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisitableNode<SemanticElement> expr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sm_ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sm_ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> sm_ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                RESULT = makeNode(NodeConstants.WHILE_OP, expr1, sm_ptr1);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= simple_expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int sm_ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sm_ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> sm_ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                  RESULT = makeNode(NodeConstants.SIMPLE_OP, sm_ptr1);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= simple_expression RELOP simple_expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int sm_ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sm_ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> sm_ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sm_ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sm_ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> sm_ptr2 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                  VisitableNode<SemanticElement> expr_node = makeNode(NodeConstants.RELOP_OPERATOR, makeNode(op));
                                                  RESULT = makeNode(NodeConstants.RELOP_OP, expr_node, sm_ptr1, sm_ptr2);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_expression ::= simple_expression adding_operator simple_expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int sm_ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sm_ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> sm_ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sm_ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sm_ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> sm_ptr2 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 VisitableNode<SemanticElement> add_node = makeNode(NodeConstants.ADD_OPERATOR, makeNode(op));
                                                 RESULT = makeNode(NodeConstants.ADD_OP, add_node, sm_ptr1, sm_ptr2);
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_expression ::= simple_expression MULT_OPERATOR simple_expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int sm_ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sm_ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<SemanticElement> sm_ptr1 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sm_ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sm_ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> sm_ptr2 = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 VisitableNode<SemanticElement> mul_node = makeNode(NodeConstants.MUL_OPERATOR, makeNode(op));
                                                 RESULT = makeNode(NodeConstants.MUL_OP, mul_node, sm_ptr1, sm_ptr2);
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_expression ::= variable 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 VisitableNode<SemanticElement> id_node = makeNode(NodeConstants.ID_NODE, makeNode(value));
                                                 RESULT = makeNode(NodeConstants.VAR_OP_NODE, id_node);
                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_expression ::= constant 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                /*   POSSIBILE NULL   */
                                                VisitableNode<SemanticElement> constant = makeNode(NodeConstants.CONST_NODE, makeNode(value));
                                                RESULT = makeNode(NodeConstants.CONST_OP_NODE, constant);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_expression ::= LPAR expression RPAR 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<SemanticElement> expr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeNode(NodeConstants.EXPR_NODE, expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_expression ::= NOT expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> expr = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(NodeConstants.NOT_NODE, expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_expression ::= MINUS simple_expression 
            {
              VisitableNode<SemanticElement> RESULT =null;
		int semanticElementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semanticElementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<SemanticElement> semanticElement = (VisitableNode<SemanticElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(NodeConstants.UNARY_MINUS_NODE, semanticElement); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // adding_operator ::= ADD_OPERATOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adding_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // adding_operator ::= MINUS 
            {
              String RESULT =null;
		RESULT = "-";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adding_operator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable ::= variable_identifier 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_identifier",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constant ::= INTEGER_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constant ::= CHARACTER_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // constant ::= STRING_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // constant ::= constant_identifier 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // constant_identifier ::= TRUE 
            {
              String RESULT =null;
		RESULT = "true";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // constant_identifier ::= FALSE 
            {
              String RESULT =null;
		RESULT = "false";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
